<?xml version="1.0" encoding="ISO-8859-15" standalone="no"?><uc-export clientvers="8.0.0">
<JOBI client="6000" name="PCK.AUTOMIC_SIEBEL.PRV.INCLUDE.FNS4UNIX" system="AE10">
<HEADER state="1">
<Title/>


<LastUsed/>
<ArchiveKey1/>
<ArchiveKey2/>
<OH_SubType/>
</HEADER>
<SCRIPT mode="1" state="1" tidy="0">
<MSCRI><![CDATA[echo "

def rf_trim_comma(str):
    if str[:1] == ',':
      str = str[1:len(str)]

    if str[len(str)-1:] == ',':
      str = str[:len(str)-1]

    return str


def rf_prep_str(val):
    if val == None:
        return None

    i = len(val)
    if i == 0:
        return None

    retval = val.strip()
    retval = rf_trim_comma(retval)

    j = len(retval)

    if i != j:
        retval = rf_prep_str(retval)

    return retval


def rf_prep_svrs_nodes(str1, str2):
    arr1 = rf_prep_svrs(str1)
    arr2 = rf_prep_svrs(str2)

    if len(arr1) != len(arr2):
        raise 'Unequal no. of elements in each string array'
    else:
        retarr = []
        for item1, item2 in zip(arr1, arr2):
            node_server = {\"nodename\": item2.strip(), \"servername\": item1.strip()}
            retarr.append(node_server)
        return retarr

def rf_prep_svrs(str1):

    if str1 == None:
        return None

    if len(str1) == 0:
        return None

    str1 = rf_prep_str(str1)
    if str1 == None:
        return []
    arr1 = str1.split(',');

    retarr = []
    for item1 in arr1:
       if len(item1.strip()) > 0:
         retarr.append(item1.strip())

    return retarr
def to_t_f(str):
    if str.lower() == 'yes' or str.lower() =='true':
       str = 'true'
    elif str.lower() == 'no' or str.lower() =='false':
       str ='false'
    # return original value if not Yes or No
    return str

def byte_array_to_string(arr):
    str = ''
    for b in arr:
      str += chr(b)
    return str

def writeReport(m, filePath):
    report_file = open(filePath,'w')
    for list in m.items():
      str = \"%s#%s\\n\" % (list[0],list[1])
      report_file.write( str )
    report_file.close()

def checkResourceExists(name, type):
    if getMBean('/' + type + 's/' + name ) is None:
      return false
    else:
      return true

def checkAppExists(name):
    found = false
    try:
      cd('/')
      for app in cmo.getAppDeployments():
        appName = app.getName()
        cd('/AppDeployments/' + appName)
        applicationName = get('ApplicationName')
        if  applicationName == name:
          found = true
          break
    except Exception:
      return found
    return found

def getAppMBean(name,version):
    mb = None
    try:
      cd('/')
      for app in cmo.getAppDeployments():
        appName = app.getName()
        cd('/AppDeployments/' + appName)
        applicationName = get('ApplicationName')
        if  applicationName == name:
          if  version == '':
            mb = getMBean('/AppDeployments/' + appName)
            break
          else:
            appVersion = get('VersionIdentifier')
            if appVersion == version:
              mb = getMBean('/AppDeployments/' + appName)
              break
    except Exception:
      return mb
    return mb
" >> "&FILENAME#"]]></MSCRI>
</SCRIPT>
<DOCU_Docu state="1" type="text">
<DOC/>
</DOCU_Docu>
</JOBI>
</uc-export>